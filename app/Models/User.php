<?php
// app/Models/User.php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Laravel\Sanctum\HasApiTokens;

class User extends Authenticatable
{
    use HasApiTokens, HasFactory, Notifiable;

    /**
     * The attributes that are mass assignable.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'name',
        'email',
        'password',
        'role',
        'phone_number',
        'profile_picture',
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var array<int, string>
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * The attributes that should be cast.
     *
     * @var array<string, string>
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
        'password' => 'hashed',
    ];

    /**
     * Get the personal reports associated with the user.
     */
    public function personalReports()
    {
        return $this->hasMany(Report::class, 'user_id');
    }

    /**
     * Get the reports generated by the user.
     */
    public function generatedReports()
    {
        return $this->hasMany(Report::class, 'generated_by');
    }

    /**
     * Get the user's contributions.
     */
    public function contributions()
    {
        return $this->hasMany(Contribution::class);
    }

    /**
     * Get the contributions verified by the user.
     */
    public function verifiedContributions()
    {
        return $this->hasMany(Contribution::class, 'verified_by');
    }

    /**
     * Get the transactions performed by the user.
     */
    public function transactions()
    {
        return $this->hasMany(Transaction::class, 'performed_by');
    }

    /**
     * Check if the user is an admin.
     */
    public function isAdmin()
    {
        return $this->role === 'admin';
    }

    /**
     * Get the total verified contributions amount for the user.
     */
    public function totalContributions()
    {
        return $this->contributions()
            ->where('verification_status', 'verified')
            ->sum('amount');
    }
    
    /**
     * Get the fines paid by the user (contributions with "fine" in the description).
     */
    public function fines()
    {
        return $this->contributions()
            ->where('verification_status', 'verified')
            ->where('description', 'like', '%fine%')
            ->sum('amount');
    }
    
    /**
     * Get the welfare fees paid by the user (contributions with "welfare" in the description).
     */
    public function welfareFees()
    {
        return $this->contributions()
            ->where('verification_status', 'verified')
            ->where('description', 'like', '%welfare%')
            ->sum('amount');
    }
    
    /**
     * Get the user's registration fee (contributions with "registration" in the description).
     */
    public function registrationFee()
    {
        return $this->contributions()
            ->where('verification_status', 'verified')
            ->where('description', 'like', '%registration%')
            ->sum('amount');
    }
    
    /**
     * Get the user's OPC contribution (contributions with "Olpajeta" in the description).
     */
    public function opcContribution()
    {
        return $this->contributions()
            ->where('verification_status', 'verified')
            ->where('description', 'like', '%Olpajeta%')
            ->sum('amount');
    }
    
    /**
     * Get the user's compliance rate.
     * Compliance is calculated as the ratio of actual contributions to expected contributions.
     */
    public function complianceRate()
    {
        // Get total contributions (excluding fines, welfare, registration, and OPC)
        $totalContributions = $this->contributions()
            ->where('verification_status', 'verified')
            ->where('description', 'like', '%Monthly contribution%')
            ->sum('amount');
        
        // Calculate expected contributions based on the sacco rules
        // June, July = 2000, August, September = 2050, rest = 2200
        $expectedContributions = 0;
        
        // Calculate based on when the user joined (using their first contribution date)
        $firstContribution = $this->contributions()
            ->where('verification_status', 'verified')
            ->orderBy('transaction_date', 'asc')
            ->first();
        
        if ($firstContribution) {
            $startDate = $firstContribution->transaction_date;
            $currentDate = now();
            
            // Calculate month by month to handle different monthly amounts
            $date = $startDate->copy()->startOfMonth();
            while ($date->lte($currentDate)) {
                $month = $date->format('F');
                
                if (in_array($month, ['June', 'July'])) {
                    $expectedContributions += 2000;
                } elseif (in_array($month, ['August', 'September'])) {
                    $expectedContributions += 2050;
                } else {
                    $expectedContributions += 2200;
                }
                
                $date->addMonth();
            }
        }
        
        if ($expectedContributions > 0) {
            return ($totalContributions / $expectedContributions) * 100;
        }
        
        return 0;
    }
}